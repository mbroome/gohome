package main

import (
	"flag"
	"fmt"
	//"io/ioutil"
	//"path/filepath"
	"os"
	"os/signal"
	"syscall"
	"time"

	//"strings"

	"github.com/golang/glog"
	"github.com/julienschmidt/httprouter"
	"net/http"

	MQTT "github.com/eclipse/paho.mqtt.golang"
)

var configDir string
var configBind string
var _client MQTT.Client

var dataMap map[string]string

func main() {
	flag.StringVar(&configDir, "config", "", "Path to config dir")
	flag.StringVar(&configBind, "bind", "", "Interface:port to bind to")
	flag.Parse()

	if configDir == "" {
		configDir = "/etc/config/exporters"
	}
	if configBind == "" {
		configBind = "0.0.0.0:8080"
	}

	dataMap = make(map[string]string)

	clientStop := make(chan os.Signal, 1)
	signal.Notify(clientStop, os.Interrupt, syscall.SIGTERM)
	defer close(clientStop)
	go mqttConnect(clientStop)

	router := httprouter.New()

	router.GET("/", Index)

	glog.Fatal(http.ListenAndServe(configBind, router))

}

func mqttConnect(c chan os.Signal) {
	qos := 0
	server := "tcp://127.0.0.1:1883"
	clientid := "gohome"
	topic := "#"

	//c := make(chan os.Signal, 1)
	//signal.Notify(c, os.Interrupt, syscall.SIGTERM)

	connOpts := MQTT.NewClientOptions().AddBroker(server).SetClientID(clientid).SetCleanSession(true)

	connOpts.OnConnect = func(c MQTT.Client) {
		if token := c.Subscribe(topic, byte(qos), onMessageReceived); token.Wait() && token.Error() != nil {
			panic(token.Error())
		}
	}

	_client = MQTT.NewClient(connOpts)
	if token := _client.Connect(); token.Wait() && token.Error() != nil {
		fmt.Println(token.Error())
		return
	}

	fmt.Printf("Connected to %s\n", server)

	<-c
}

func Index(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	var response = "ok"

	qos := 0
	retained := false
	topic := "home/garden/fountain"

	message := "from gohome: " + time.Now().String()
	_client.Publish(topic, byte(qos), retained, message)

	w.WriteHeader(200)
	fmt.Fprint(w, string(response))

	fmt.Print(dataMap)
}

func onMessageReceived(client MQTT.Client, message MQTT.Message) {
	fmt.Printf("Received message on topic: %s\nMessage: %s\n", message.Topic(), message.Payload())
	dataMap[message.Topic()] = string(message.Payload())
}
